1. One of the most challenging feature to implement into my functions the ability to accept both arithmetic and non-arithmetic inputs. The functions that need such a feature are getInteger(), getDouble(), and getIntFromRange(). The reason being is that the funtionality of a function changes drastically because of the number of inputs and the the different types of inputs a function can accept. If a function is coded to accept two different types of inputs, than the function will need to handle accepting two inputs. Even if an example only gives one input, the programmer needs to find a way to code the functionality of the function to accept two inputs while looking like it is accepting one input. I manage to overcome this challenge because I asked a question to the professor and they explained how functionality works and how clearing the input buffer can help solve the problem. When puting a function to clear the input buffer in different places, the behaviour of the function changes and I used this trial-and-error procedure to find the perfect behaviour for my program.

2. Helper functions help clean up much of the source code so I can find a particular code more easily. Because of this fact the amount of debugging time has decreased tremendously. With a smaller source code, I am able to find a particular code I want to debug and edit at a much faster time and change the code at a faster pace and without lossing much of my eye and mental focus.

3. The advantage of structs is to help organize one's code. Having one's code organized in a clean way helps reduce the time it takes to find particular sections of code and lets the programmer can have a better understanding of where their codes are located to make changes at a faster speed.